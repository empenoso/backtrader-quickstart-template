# strategies/sma_cross_strategy.py

# üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö" üìà
#
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (runonce=False)
#
# –í–µ—Ä—Å–∏—è: 1.2 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)

import math
import backtrader as bt
from .base_strategy import BaseStrategy


class SmaCrossStrategy(BaseStrategy):
    """
    SMA Crossover strategy ‚Äî –≤–µ—Ä—Å–∏—è –¥–ª—è –º—É–ª—å—Ç–∏-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–Ω—ã—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤
    —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö (runonce=False).

    –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–º –±–∞—Ä–µ
    - –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–∂–∏–≤—ã—Ö" –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ per ticker
    """

    # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å) ---
    tickers = [
        'SBER','VTBR','GAZP','LKOH','NVTK', 'YDEX'
    ]

    start_cash = 500_000.0
    commission = 0.001

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
    params = (
        ('fast_ma', 20),
        ('slow_ma', 50),
        # –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–ø–∏—Ç–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        ('alloc_percent_per_ticker', 0.90),  # 90% –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –¥–æ–ª–∏ –Ω–∞ —Ç–∏–∫–µ—Ä
        # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (–≤ –±—É–º–∞–≥–∞—Ö/–ª–æ—Ç–∞—Ö), –µ—Å–ª–∏ —Ü–µ–Ω–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞
        ('min_size', 1),
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ OPTIMIZATION)
    opt_params = {
        'fast_ma': range(5, 21, 5),
        'slow_ma': range(30, 61, 10),
    }

    def __init__(self):
        super().__init__()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö data feeds
        self.n_data = max(1, len(self.datas))

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∫–∞–∂–¥–æ–º—É data feed
        self.indicators = {}
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±—É–º–∞–≥, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –ø–æ—à–ª–∏ –¥–∞–Ω–Ω—ã–µ
        self.live_datas = set()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.min_periods = {}

        for d in self.datas:
            # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É `d` (–æ–±—ä–µ–∫—Ç data)
            self.indicators[d] = {
                'fast_sma': bt.indicators.SimpleMovingAverage(d.close, period=self.p.fast_ma),
                'slow_sma': bt.indicators.SimpleMovingAverage(d.close, period=self.p.slow_ma),
            }
            # Crossover —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö SMA –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ data feed
            self.indicators[d]['crossover'] = bt.indicators.CrossOver(
                self.indicators[d]['fast_sma'],
                self.indicators[d]['slow_sma'],
                plot=False
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —ç—Ç–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
            self.min_periods[d] = max(self.p.fast_ma, self.p.slow_ma)

        # –ö—ç—à –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
        self._capital_per_ticker = None

    def _ensure_capital_per_ticker(self):
        """–í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä."""
        if self._capital_per_ticker is not None:
            return

        cash = float(self.broker.getcash()) if self.broker.getcash() > 0 else float(self.start_cash)
        self._capital_per_ticker = cash / float(self.n_data)
        self.log(f"[INIT] n_data={self.n_data}, cash={cash:.2f}, capital_per_ticker={self._capital_per_ticker:.2f}")

    def _is_data_ready(self, data):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:
        - –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ
        - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –±–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            current_price = data.close[0]
            if math.isnan(current_price) or current_price <= 0:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            data_len = len(data)
            min_required = self.min_periods.get(data, max(self.p.fast_ma, self.p.slow_ma))
            if data_len < min_required:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            fast_sma = self.indicators[data]['fast_sma'][0]
            slow_sma = self.indicators[data]['slow_sma'][0]
            crossover = self.indicators[data]['crossover'][0]
            
            if math.isnan(fast_sma) or math.isnan(slow_sma) or math.isnan(crossover):
                return False
                
            return True
            
        except (IndexError, KeyError) as e:
            # –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ
            return False

    def next(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏."""
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
        self._ensure_capital_per_ticker()

        for d in self.datas:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            if not self._is_data_ready(d):
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –±—É–º–∞–≥–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            if d not in self.live_datas:
                self.live_datas.add(d)
                current_date = bt.num2date(d.datetime[0]).strftime('%Y-%m-%d')
                self.log(f"[ADD] {d._name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ—Ä–≥–∞–º —Å {current_date}")

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            crossover_val = self.indicators[d]['crossover'][0]
            fast_sma = self.indicators[d]['fast_sma'][0]
            slow_sma = self.indicators[d]['slow_sma'][0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ —Ü–µ–Ω—É
            pos = self.getposition(d)
            price = d.close[0]

            # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            if pos.size == 0:
                # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
                if crossover_val > 0:  # –ë—ã—Å—Ç—Ä–∞—è SMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                    self._execute_buy_signal(d, price)
            else:
                # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                if crossover_val < 0:  # –ë—ã—Å—Ç—Ä–∞—è SMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                    self._execute_sell_signal(d, price, pos)

    def _execute_buy_signal(self, data, price):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É."""
        try:
            alloc = self._capital_per_ticker * float(self.p.alloc_percent_per_ticker)
            size = int(alloc / price)

            if size < int(self.p.min_size):
                self.log(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {data._name}: "
                        f"price={price:.2f}, alloc={alloc:.2f}, size={size}")
                return

            self.log(f"BUY SIGNAL for {data._name}: price={price:.2f}, size={size}, alloc={alloc:.2f}")
            order = self.buy(data=data, size=size)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ {data._name}: {e}")

    def _execute_sell_signal(self, data, price, position):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)."""
        try:
            self.log(f"SELL SIGNAL for {data._name}: closing position size={position.size} at price={price:.2f}")
            order = self.close(data=data)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {data._name}: {e}")

    def notify_order(self, order):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞."""
        super().notify_order(order)
        
        if order.status in [order.Completed]:
            data_name = getattr(order.data, '_name', 'unknown')
            if order.isbuy():
                self.log(f"BUY EXECUTED, Price: {order.executed.price:.2f}, "
                        f"Cost: {order.executed.value:.2f}, "
                        f"Comm: {order.executed.comm:.2f}")
                self.log(f"ORDER COMPLETED BUY for {data_name}: "
                        f"price={order.executed.price:.2f}, size={order.executed.size}")
            elif order.issell():
                self.log(f"SELL EXECUTED, Price: {order.executed.price:.2f}, "
                        f"Cost: {order.executed.value:.2f}, "
                        f"Comm: {order.executed.comm:.2f}")
                self.log(f"ORDER COMPLETED SELL for {data_name}: "
                        f"price={order.executed.price:.2f}, size={order.executed.size}")

    def notify_trade(self, trade):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."""
        super().notify_trade(trade)
        
        if trade.isclosed:
            data_name = getattr(trade.data, '_name', 'unknown') 
            self.log(f'OPERATION PROFIT for {data_name}, GROSS {trade.pnl:.2f}, NET {trade.pnlcomm:.2f}')