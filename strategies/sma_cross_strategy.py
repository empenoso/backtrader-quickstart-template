# strategies/sma_cross_strategy.py

# üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö" ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
#
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ Backtrader
# (runonce=False, preload=False, oldsync=False, exactbars=-1).
#
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è:
# - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ params = dict(...) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ –≥–∏–±–∫–æ—Å—Ç–∏.
# - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ data feed, –Ω–æ –≤ next –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ "–∂–∏–≤—ã–µ" –¥–∞–Ω–Ω—ã–µ.
# - –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ prenext/nextstart: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ –±—É–º–∞–≥–∏
#   –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è.
# - –ö–∞–ø–∏—Ç–∞–ª –∏ –∞–ª–ª–æ–∫–∞—Ü–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
# - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ.
# - –ü—Ä–æ—Å—Ç–∞—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ SMA.
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞: 2025-08-21
# –í–µ—Ä—Å–∏—è: 1.3
#

import math
import collections
import backtrader as bt
from .base_strategy import BaseStrategy


class SmaCrossStrategy(BaseStrategy):
    """
    SMA Crossover strategy ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.

    –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ data feed –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    —Å —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –¥–ª—è –Ω–µ–≥–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
    """

    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—É–¥–æ–±–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å) ---
    params = dict(
        fast_ma=20,
        slow_ma=50,
        alloc_percent_per_ticker=0.90,  # –¥–æ–ª—è –≤—ã–¥–µ–ª—è–µ–º–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
        min_size=1,                     # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç/—à—Ç—É–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        rebal_weekday=None,             # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã, –∑–∞–¥–∞—Ç—å 0..6 (Mon..Sun), None ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–æ
        log_on_connect=True,            # –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    )

    # –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –±–∞–∑–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–±–µ—Ä—É—Ç—Å—è –∏–∑ BaseStrategy, –Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
    tickers = [
        'SBER', 'VTBR', 'GAZP', 'LKOH', 'NVTK', 'YDEX', 'T'
    ]
    start_cash = 500_000.0
    commission = 0.001

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 2 –∫–ª—é—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –≤ main.py)
    opt_params = {
        'fast_ma': range(5, 21, 5),
        'slow_ma': range(30, 61, 10),
    }

    def __init__(self):
        super().__init__()

        # ---- —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ----
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ data feed
        self.inds = collections.defaultdict(dict)

        # –°–ø–∏—Å–æ–∫ data feeds, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ "–∂–∏–≤—É—Ç" (–Ω–∞–∫–æ–ø–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –±–∞—Ä–æ–≤)
        self.d_with_len = []  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ prenext / nextstart

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ data feeds, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –∫–∞–∫ "–ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ"
        self.live_logged = set()

        # –∫–µ—à –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ data
        self.min_periods = {}

        # –ö—ç—à –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Ç–∏–∫–µ—Ä (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        self._capital_per_active_ticker = None
        self._capital_calc_for_len = None  # –¥–ª–∏–Ω–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø–æ—Å—á–∏—Ç–∞–Ω –∫—ç—à

        # —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ data (–æ–Ω–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nan –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        for d in self.datas:
            # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞—ë–º –≤ –æ–±—â–µ–º –≤–∏–¥–µ, —á—Ç–æ–±—ã Backtrader —Å–ª–µ–¥–∏–ª –∑–∞ –∏—Ö –±—É—Ñ–µ—Ä–∞–º–∏
            self.inds[d]['fast_sma'] = bt.ind.SMA(d.close, period=self.p.fast_ma)
            self.inds[d]['slow_sma'] = bt.ind.SMA(d.close, period=self.p.slow_ma)
            self.inds[d]['crossover'] = bt.ind.CrossOver(self.inds[d]['fast_sma'],
                                                         self.inds[d]['slow_sma'],
                                                         plot=False)

            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            self.min_periods[d] = max(int(self.p.fast_ma), int(self.p.slow_ma))

        # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–∞–π–º–µ—Ä ‚Äî –¥–æ–±–∞–≤–∏–º –µ–≥–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.p.rebal_weekday is not None:
            # —Ç–∞–π–º–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç notify_timer –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é; –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∞
            self.add_timer(when=bt.Timer.SESSION_START,
                           weekdays=[self.p.rebal_weekday],
                           weekcarry=True)

    # -------------------------
    # –•—É–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # -------------------------
    def prenext(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –µ—â—ë –Ω–µ –≤—Å–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ (—Ç.–µ. –Ω–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã/–¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã–µ),
        –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö data –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ next.
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º data feeds, —É –∫–æ—Ç–æ—Ä—ã—Ö len > 0
        self.d_with_len = [d for d in self.datas if len(d)]
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∫–∞–ø–∏—Ç–∞–ª–∞, —Ç.–∫. —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        self._capital_per_active_ticker = None
        # –î–µ–ª–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (–∑–∞—â–∏—â—ë–Ω–Ω—É—é –≤–Ω—É—Ç—Ä–∏ next)
        self.next()

    def nextstart(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤–ø–µ—Ä–≤—ã–µ.
        –ó–¥–µ—Å—å –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ data feeds "–¥–æ—Å—Ç—É–ø–Ω—ã".
        """
        # –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        self.d_with_len = list(self.datas)
        self._capital_per_active_ticker = None
        self.next()

    # -------------------------
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # -------------------------
    def _ensure_capital_per_ticker(self):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∫–∞–ø–∏—Ç–∞–ª, –≤—ã–¥–µ–ª—è–µ–º—ã–π –Ω–∞ –∫–∞–∂–¥—ã–π *–∞–∫—Ç–∏–≤–Ω—ã–π* —Ç–∏–∫–µ—Ä.
        –ü–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
        """
        active_n = max(1, len(self.d_with_len) if len(self.d_with_len) else len(self.datas))
        if self._capital_per_active_ticker is not None and self._capital_calc_for_len == active_n:
            return

        cash = float(self.broker.getcash()) if self.broker.getcash() is not None else float(self.start_cash)
        # –¥–µ–ª–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–ª–∏—á–Ω—ã–µ –Ω–∞ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        capital_per = cash / float(active_n)
        self._capital_per_active_ticker = capital_per
        self._capital_calc_for_len = active_n
        self.log(f"[CAPITAL] cash={cash:.2f}, active_n={active_n}, capital_per_ticker={capital_per:.2f}")

    def _data_ready(self, d):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ data feed –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:
        - len(d) >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ NaN)
        - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞
        """
        try:
            # –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–æ–±—â–µ
            if len(d) < 1:
                return False

            # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if len(d) < self.min_periods.get(d, 0):
                return False

            # —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price = d.close[0]
            if price is None or price <= 0 or (isinstance(price, float) and math.isnan(price)):
                return False

            # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: fast and slow SMA –∏ crossover
            fast = self.inds[d]['fast_sma'][0]
            slow = self.inds[d]['slow_sma'][0]
            xo = self.inds[d]['crossover'][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN (Backtrader –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å float('nan') –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
            for v in (fast, slow, xo):
                if v is None:
                    return False
                if isinstance(v, float) and math.isnan(v):
                    return False

            return True

        except Exception:
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ data/–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
            return False

    # -------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–∑–∞—â–∏—â—ë–Ω–Ω—ã–π)
    # -------------------------
    def next(self):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å self.d_with_len (–ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö).
        –í—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω—ã –∏ –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã data feeds.
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö data feeds –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ (–ø—Ä–∏—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è d_with_len –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        # ‚Äî –Ω–æ –¥–µ–ª–∞–µ–º —ç—Ç–æ –±—ã—Å—Ç—Ä–æ, –∏—Å–ø–æ–ª—å–∑—É—è len(d)
        current_available = [d for d in self.datas if len(d)]
        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–∏–º –∫—ç—à –∏ —É–≤–µ–¥–æ–º–∏–º
        if set(current_available) != set(self.d_with_len):
            self.d_with_len = current_available
            self._capital_per_active_ticker = None  # –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–ª
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        self._ensure_capital_per_ticker()

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ data feeds, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
        for d in list(self.d_with_len):
            # –∑–∞—â–∏—Ç–∞: –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            if not self._data_ready(d):
                continue

            # –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if self.p.log_on_connect and d not in self.live_logged:
                self.live_logged.add(d)
                try:
                    current_date = bt.num2date(d.datetime[0]).strftime('%Y-%m-%d')
                except Exception:
                    current_date = str(d.datetime[0])
                self.log(f"[ADD] {getattr(d, '_name', 'unknown')} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ—Ä–≥–∞–º —Å {current_date}")

            # –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            xo = self.inds[d]['crossover'][0]
            fast = self.inds[d]['fast_sma'][0]
            slow = self.inds[d]['slow_sma'][0]

            # —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏—è
            price = d.close[0]
            pos = self.getposition(d)

            # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ SMA
            # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö
            if pos.size == 0:
                if xo > 0:
                    self._execute_buy_signal(d, price)
            else:
                # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑
                if xo < 0:
                    self._execute_sell_signal(d, price, pos)

    # -------------------------
    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
    # -------------------------
    def _execute_buy_signal(self, data, price):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        try:
            alloc = float(self._capital_per_active_ticker) * float(self.p.alloc_percent_per_ticker)
            size = int(alloc / price) if price > 0 else 0

            if size < int(self.p.min_size):
                self.log(f"[BUY SKIP] {getattr(data,'_name','unknown')} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π size (price={price:.2f}, alloc={alloc:.2f}, size={size})")
                return

            self.log(f"[BUY] {getattr(data,'_name','unknown')} price={price:.2f} size={size} alloc={alloc:.2f}")
            self.buy(data=data, size=size)

        except Exception as e:
            self.log(f"[ERROR BUY] {getattr(data,'_name','unknown')}: {e}")

    def _execute_sell_signal(self, data, price, position):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        try:
            self.log(f"[SELL] {getattr(data,'_name','unknown')} closing size={position.size} price={price:.2f}")
            self.close(data=data)
        except Exception as e:
            self.log(f"[ERROR SELL] {getattr(data,'_name','unknown')}: {e}")

    # -------------------------
    # notify hooks
    # -------------------------
    def notify_order(self, order):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–∞."""
        super().notify_order(order)

        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ BaseStrategy; –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if order.status in [order.Completed]:
            dname = getattr(order.data, '_name', 'unknown')
            if order.isbuy():
                # order.executed.price / .size / .value / .comm –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
                self.log(f"[ORDER DONE BUY] {dname} price={order.executed.price:.2f} size={getattr(order.executed, 'size', 'n/a')}")
            elif order.issell():
                self.log(f"[ORDER DONE SELL] {dname} price={order.executed.price:.2f} size={getattr(order.executed, 'size', 'n/a')}")

    def notify_trade(self, trade):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫."""
        super().notify_trade(trade)
        if trade.isclosed:
            dname = getattr(trade.data, '_name', 'unknown') if hasattr(trade, 'data') else 'unknown'
            self.log(f"[TRADE CLOSED] {dname} GROSS {trade.pnl:.2f} NET {trade.pnlcomm:.2f}")

    def notify_timer(self, timer, when, *args, **kwargs):
        """
        –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞–π–º–µ—Ä (rebal_weekday), –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
        """
        try:
            self.log(f"[TIMER] when={when} timer={timer} args={args} kwargs={kwargs}")
            # –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–±–∞–ª–∞–Ω—Å/—Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∑–¥–µ—Å—å.
        except Exception as e:
            self.log(f"[TIMER ERROR] {e}")
