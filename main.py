# main.py

# üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π üöÄ
#
# –≠—Ç–æ—Ç Python —Å–∫—Ä–∏–ø—Ç —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
# –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤),
# —É–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥. –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ,
# –ø—Ä–æ–≤–æ–¥–∏—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ –ø–∞–ø–∫—É 'reports'.
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - –ì–ª–∞–≤–Ω–∞—è "–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
# - –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: 'BACKTEST' (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç) –∏–ª–∏ 'OPTIMIZATION' (–ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).
# - –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞.
# - –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ 'data-connector/Data/Tinkoff/'.
# - –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤ –≤ –¥–≤–∏–∂–∫–µ Backtrader.
# - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
# - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ (–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞) –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ.
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 22.08.2025
# –í–µ—Ä—Å–∏—è: 1.3
# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/backtrader-quickstart-template/
#
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–µ–∫—Ü–∏–∏ "–ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø".
#

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import os
import sys
import datetime

# –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ –î–û –∏–º–ø–æ—Ä—Ç–∞ backtrader –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è,
import matplotlib as mpl
mpl.use('Agg')  # –ì–æ–≤–æ—Ä–∏–º matplotlib, —á—Ç–æ –º—ã –±—É–¥–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª—ã.
import matplotlib.pyplot as plt
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
plt.switch_backend('Agg')
from matplotlib.figure import Figure

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º "—Ç—è–∂–µ–ª—ã–µ" –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç matplotlib 
import backtrader as bt

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ---
sys.stdout.reconfigure(encoding='utf-8')

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
import strategies
from utils.custom_csv import CustomCSVData
from utils.sortino_analyzer import SortinoRatio
from utils.report_generator import generate_backtest_report, generate_optimization_report

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Live Trading (Tinkoff) ---
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Live Trading
# from BackTraderTinkoff import TKStore
# import logging

# ======================================================================================
# --- –ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
# ======================================================================================

# 1. –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú: 'BACKTEST' –∏–ª–∏ 'OPTIMIZATION'
MODE = 'BACKTEST'

# 2. –í–´–ë–ï–†–ò–¢–ï –°–¢–†–ê–¢–ï–ì–ò–Æ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö (—Å–º. –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
#    –ò–º—è –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
STRATEGY_TO_RUN = 'SmaCrossStrategy' 

# 3. –ù–ê–°–¢–†–û–ô–ö–ò –ü–ï–†–ò–û–î–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
FROM_DATE = datetime.datetime(2018, 1, 1)
TO_DATE = datetime.datetime(2025, 8, 12)

# 4. –ù–ê–°–¢–†–û–ô–ö–ò LIVE TRADING (–ï–°–õ–ò –ù–£–ñ–ù–û)
#    –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LIVE_TRADING = True
LIVE_TRADING = False
TINKOFF_TOKEN = "your_tinkoff_invest_api_token_here" # –í–ê–® –¢–û–ö–ï–ù

# 5. –ü–£–¢–ò –ö –ü–ê–ü–ö–ê–ú
DATA_DIR = 'data-connector/Data/Tinkoff/'
REPORTS_DIR = 'reports'

# ======================================================================================
# --- –ö–û–ù–ï–¶ –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
# ======================================================================================

if __name__ == '__main__':
    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
    os.makedirs(REPORTS_DIR, exist_ok=True)
    
    if STRATEGY_TO_RUN not in strategies.available_strategies:
        raise ValueError(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{STRATEGY_TO_RUN}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                         f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {list(strategies.available_strategies.keys())}")
    
    StrategyClass = strategies.available_strategies[STRATEGY_TO_RUN]

    # --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cerebro –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
    cerebro = bt.Cerebro(
        stdstats=False, 
        optreturn=False if MODE == 'OPTIMIZATION' else True,
        runonce=False,  # –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†: –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        preload=False,  # –ù–ï –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å
        oldsync=False,   # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        exactbars=-1    # –î–û–ë–ê–í–ò–¢–¨: –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
    )

    # --- –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ ---
    # –í–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å stdstats=False –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Buy/Sell –∫–∞–∫ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–¥/–ø–æ–¥ —Å–≤–µ—á–æ–π (barplot=True) –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç —Å–≤–µ—á–∏ (bardist)
    # cerebro.addobserver(bt.observers.BuySell, barplot=True, bardist=0.015)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è / –∫—ç—à–∞ ‚Äî —É–¥–æ–±–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫
    cerebro.addobserver(bt.observers.Value, plotname='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è')    # –ø–æ—Ä—Ç—Ñ–µ–ª—å value (–≤–∫–ª—é—á–∞—è cash)
    cerebro.addobserver(bt.observers.Cash, plotname='–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞')     # cash –æ—Ç–¥–µ–ª—å–Ω–æ
    cerebro.addobserver(bt.observers.DrawDown, plotname='–ü—Ä–æ—Å–∞–¥–∫–∞ (%)')       # –ø—Ä–æ—Å–∞–¥–∫–∞
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–¥–µ–ª–∫–∞–º (PnL –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ —Ç.–¥.)
    cerebro.addobserver(bt.observers.Trades, pnlcomm=True, plotname='P&L –ø–æ —Å–¥–µ–ª–∫–∞–º')

    # --- 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (Live vs Backtest) ---
    if LIVE_TRADING:
        print("–†–ï–ñ–òM: –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø (TINKOFF)")
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff, –≤–∑—è—Ç–∞—è –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ò–≥–æ—Ä—è –ß–µ—á–µ—Ç–∞
        # store = TKStore(token=TINKOFF_TOKEN)
        # broker = store.getbroker()
        # cerebro.setbroker(broker)
        
        # for ticker in StrategyClass.tickers:
        #     # —Ñ–æ—Ä–º–∞—Ç —Ç–∏–∫–µ—Ä–∞ –¥–ª—è Tinkoff –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        #     dataname = ticker.split('_')[0] 
        #     data = store.getdata(dataname=dataname, fromdate=FROM_DATE)
        #     cerebro.adddata(data)
        
        # cerebro.addsizer(bt.sizers.FixedSize, stake=10) # –ü—Ä–∏–º–µ—Ä —Å–∞–π–∑–µ—Ä–∞
        print("–í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–≥–∏–∫–∞ Live Trading –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞. "
              "–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

    else: # –†–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print(f"–†–ï–ñ–ò–ú: {MODE}")
        
        # --- 4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---

        # –ù–ê–°–¢–†–û–ô–ö–ò –ú–ê–†–ö–ï–¢–ê –ò –§–û–†–ú–ê–¢–ê –§–ê–ô–õ–û–í
        MARKET_PREFIX = "TQBR"
        TIMEFRAME_SUFFIX = "_D1.txt"

        for ticker in StrategyClass.tickers:
            filename = f"{MARKET_PREFIX}.{ticker}{TIMEFRAME_SUFFIX}"
            datapath = os.path.join(DATA_DIR, filename)
            if not os.path.exists(datapath):
                print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {datapath}")
                continue
            
            data_feed = CustomCSVData(
                dataname=datapath,
                fromdate=FROM_DATE,  
                todate=TO_DATE
            )
            cerebro.adddata(data_feed, name=ticker)

            # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º observer –∫ —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ä–∏–∏, —á—Ç–æ–±—ã —Å—Ç—Ä–µ–ª–∫–∏ —Ä–∏—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞ –µ—ë –≥—Ä–∞—Ñ–∏–∫–µ
            cerebro.addobserver(bt.observers.BuySell, barplot=True, bardist=0.015, plotmaster=data_feed)
        
        # --- 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–æ–∫–µ—Ä–∞ ---
        cerebro.broker.setcash(StrategyClass.start_cash)
        cerebro.broker.setcommission(commission=StrategyClass.commission)
        
        # --- 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é) ---
        # cerebro.addsizer(bt.sizers.PercentSizer, percents=95)
        
        # --- 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ ---
        cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name='trade_analyzer')
        cerebro.addanalyzer(bt.analyzers.DrawDown, _name='drawdown')
        cerebro.addanalyzer(bt.analyzers.Returns, _name='returns')
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑ —Ñ–∞–π–ª–∞
        cerebro.addanalyzer(SortinoRatio, _name='sortino', riskfreerate=0.0, periods_per_year=252, mar=0.0)


    # --- 8. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ Cerebro ---
    if MODE == 'OPTIMIZATION':
        opt_params = StrategyClass.opt_params
        if not opt_params or len(opt_params) != 2:
             raise ValueError("–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã "
                              "–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ä–æ–≤–Ω–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ 'opt_params'")
        
        opt_param_names = list(opt_params.keys())
        cerebro.optstrategy(StrategyClass, **opt_params)
        print(f"–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è {STRATEGY_TO_RUN} –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {opt_param_names}")

    else: # 'BACKTEST'
        cerebro.addstrategy(StrategyClass)
        print(f"–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {STRATEGY_TO_RUN}")


    # --- 9. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
    results = cerebro.run() 

    # --- 10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ ---
    if not LIVE_TRADING:
        if MODE == 'OPTIMIZATION':
            print("--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---")
            generate_optimization_report(
                results,
                strategy_name=STRATEGY_TO_RUN,
                opt_param_names=opt_param_names,
                from_date=FROM_DATE,
                to_date=TO_DATE,
                reports_dir=REPORTS_DIR
            )
        else: # 'BACKTEST'
            print("\n--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É ---")
            generate_backtest_report(
                results[0],
                strategy_name=STRATEGY_TO_RUN,
                from_date=FROM_DATE,
                to_date=TO_DATE,
                reports_dir=REPORTS_DIR
            )
            
            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª—ã (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞) ---
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ.
                #    –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤.
                strategy_instance = results[0]
                tickers_in_test = [d._name for d in strategy_instance.datas]
                num_figs = max(1, len(tickers_in_test))

                # 2. –í—ã–∑—ã–≤–∞–µ–º plot() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º plotind=True.
                #    Backtrader –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–≥—É—Ä, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤.
                figures = cerebro.plot(
                    style='candlestick',
                    barup='green',
                    bardown='red',
                    vol=True,
                    plotind=True,
                    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
                    fig_w=16, # –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π —Ñ–∏–≥—É—Ä—ã –≤ –¥—é–π–º–∞—Ö
                    fig_h=9,   # –í—ã—Å–æ—Ç–∞ –∫–∞–∂–¥–æ–π —Ñ–∏–≥—É—Ä—ã –≤ –¥—é–π–º–∞—Ö
                    # numfigs=num_figs  # <- –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ –æ–¥–Ω–æ–π —Ñ–∏–≥—É—Ä–µ –Ω–∞ —Ç–∏–∫–µ—Ä
                )

                # 3. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∏–≥—É—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –≤ —Å–≤–æ–π —Ñ–∞–π–ª.
                timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')
                period_str = f"{FROM_DATE.strftime('%Y%m%d')}-{TO_DATE.strftime('%Y%m%d')}"

                # figures - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤, [[fig1], [fig2], ...]. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–º—É.
                for i, fig_group in enumerate(figures):
                    if i >= len(tickers_in_test):
                        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä –±–æ–ª—å—à–µ, —á–µ–º —Ç–∏–∫–µ—Ä–æ–≤ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
                        ticker_name = f"data_{i}"
                    else:
                        ticker_name = tickers_in_test[i]
                    
                    # –ò–º—è —Ñ–∞–π–ª–∞ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç —Ç–∏–∫–µ—Ä
                    plot_filename = f"{STRATEGY_TO_RUN}_{ticker_name}_plot_{timestamp}_{period_str}.png"
                    plot_filepath = os.path.join(REPORTS_DIR, plot_filename)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–≥—É—Ä—É (–ø–µ—Ä–≤—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ fig_group)
                    fig_group[0].savefig(plot_filepath, dpi=200) # dpi=200-300 –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    
                    print(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è '{ticker_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {plot_filepath}")

            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: {e}")