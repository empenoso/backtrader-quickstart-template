# utils/report_generator.py

# üìä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ üìä
#
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏ –Ω–∞–≥–ª—è–¥–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏—Ç–æ–≥–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
# –û–Ω –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É—Ö–∏–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –∞ –¥–ª—è —Ä–µ–∂–∏–º–∞
# –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∏—Ç "—Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É" ‚Äî –≥—Ä–∞—Ñ–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
# —Å–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–±—ç–∫—Ç–µ—Å—Ç–∞):
#   - –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: –∏—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å, –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ.
#   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–æ–¥—Ö–æ–¥–æ–º "–∫—É–ø–∏–ª –∏ –¥–µ—Ä–∂–∏".
#   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É 'reports'.
# - –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
#   - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
#   - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ "—Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã" (.png), –≥–¥–µ —Ü–≤–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–∞—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
#   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∞–ø–∫—É 'reports'.
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 10.08.2025
# –í–µ—Ä—Å–∏—è: 1.0
# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/backtrader-quickstart-template/
#
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ main.py.
#

import os
import datetime
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def generate_backtest_report(strategy_result, strategy_name, from_date, to_date, reports_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±—ç–∫—Ç–µ—Å—Ç–∞."""
    p = getattr(strategy_result, 'params', None)
    
    # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    try:
        analyzer = strategy_result.analyzers.trade_analyzer.get_analysis()
    except Exception:
        analyzer = None
    try:
        drawdown = strategy_result.analyzers.drawdown.get_analysis()
    except Exception:
        drawdown = None
    try:
        returns = strategy_result.analyzers.returns.get_analysis()
    except Exception:
        returns = {}
    try:
        sortino_data = strategy_result.analyzers.sortino.get_analysis() or {}
    except Exception:
        sortino_data = {}

    sortino_value = sortino_data.get('sortino', None)

    # –°–¥–µ–ª–∫–∏
    total_closed_trades = getattr(analyzer, 'total', None)
    total_closed_trades = (total_closed_trades.closed if total_closed_trades is not None else 0) if analyzer else 0
    won_trades = (analyzer.won.total if analyzer and getattr(analyzer, 'won', None) else 0)
    lost_trades = (analyzer.lost.total if analyzer and getattr(analyzer, 'lost', None) else 0)

    # –ù–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    initial_value = getattr(strategy_result.broker, 'startingcash', None)
    final_value = strategy_result.broker.getvalue()
    pnl = (final_value - initial_value) if initial_value is not None else None
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
    pnl_percent = (pnl / initial_value * 100) if (pnl is not None and initial_value is not None and initial_value != 0) else 0.0

    # –†–∞—Å—á–µ—Ç Buy and Hold: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π close –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    buy_and_hold_return = None
    buy_and_hold_absolute = None
    try:
        data = strategy_result.datas[0]
        n_bars = len(data)
        if n_bars >= 1:
            # –ü–µ—Ä–≤—ã–π close: –∏–Ω–¥–µ–∫—Å - (n_bars-1)
            first_idx = -(n_bars - 1)
            first_close = data.close[first_idx]
            last_close = data.close[0]
            if first_close != 0:
                buy_and_hold_return = (last_close - first_close) / first_close
                # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ buy and hold –≤ –¥–µ–Ω–µ–∂–Ω–æ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ
                buy_and_hold_absolute = initial_value * buy_and_hold_return if initial_value else 0
    except Exception:
        buy_and_hold_return = None
        buy_and_hold_absolute = None

    # –†–∞—Å—á–µ—Ç Profit Factor
    gross_profit = (analyzer.won.pnl.total if analyzer and getattr(analyzer, 'won', None) else 0)
    gross_loss = abs((analyzer.lost.pnl.total if analyzer and getattr(analyzer, 'lost', None) else 0))
    profit_factor = gross_profit / gross_loss if gross_loss != 0 else (float('inf') if gross_profit > 0 else 0.0)

    # Win rate
    win_rate = (won_trades / total_closed_trades * 100) if total_closed_trades else 0.0

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    max_drawdown_percent = (drawdown.max.drawdown if drawdown and getattr(drawdown, 'max', None) else 0.0)
    max_drawdown_absolute = initial_value * (max_drawdown_percent / 100) if initial_value else 0.0

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sortino –±–µ–∑–æ–ø–∞—Å–Ω–æ
    def fmt_sortino(v):
        if v is None:
            return "N/A"
        if v == float('inf'):
            return "inf"
        return f"{v:.2f}"
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
    def fmt_money(value):
        if value is None:
            return "N/A"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        return f"{value:,.2f}".replace(',', ' ')
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è buy and hold
    def fmt_buy_hold():
        if buy_and_hold_return is None or buy_and_hold_absolute is None:
            return "–†–µ–∑—É–ª—å—Ç–∞—Ç '–ö—É–ø–∏–ª –∏ –¥–µ—Ä–∂–∞–ª': N/A"
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç '–ö—É–ø–∏–ª –∏ –¥–µ—Ä–∂–∞–ª': {fmt_money(buy_and_hold_absolute)} [{buy_and_hold_return * 100:.2f}%]"

    report_lines = [
        f"--- –û–¢–ß–ï–¢ –ü–û –ë–≠–ö–¢–ï–°–¢–£ –°–¢–†–ê–¢–ï–ì–ò–ò: {strategy_name} ---",
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {p}",
        f"–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å {from_date.strftime('%d.%m.%Y')} –ø–æ {to_date.strftime('%d.%m.%Y')}",
        "--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---",
        f"–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {fmt_money(pnl)} [{pnl_percent:.2f}%]" if pnl is not None else "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: N/A",
        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤—ã—Ö): {returns.get('rnorm100', 0.0):.2f}%",
        fmt_buy_hold(),
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {fmt_money(max_drawdown_absolute)} [{max_drawdown_percent:.2f}%]",
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_closed_trades}",
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {win_rate:.2f}% ({won_trades} –∏–∑ {total_closed_trades})",
        f"–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {profit_factor:.2f}" if profit_factor not in (float('inf'), None) else f"–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {'inf' if profit_factor==float('inf') else 'N/A'}",
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {fmt_sortino(sortino_value)}",
        "--------------------------------------------------"
    ]
    
    # –£–±–∏—Ä–∞–µ–º None-—Å—Ç—Ä–æ–∫–∏
    report_lines = [r for r in report_lines if r is not None]

    report_content = "\n".join(report_lines)
    print(report_content)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')
    period_str = f"{from_date.strftime('%Y%m%d')}-{to_date.strftime('%Y%m%d')}"
    filename = f"{strategy_name}_test_{timestamp}_{period_str}.txt"
    filepath = os.path.join(reports_dir, filename)

    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(report_content)
    print(f"\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filepath}")


def generate_optimization_report(results, strategy_name, opt_param_names, from_date, to_date, reports_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É."""
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')
    period_str = f"{from_date.strftime('%Y%m%d')}-{to_date.strftime('%Y%m%d')}"
    
    # --- 1. –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç ---
    txt_filename = f"{strategy_name}_opt_{timestamp}_{period_str}.txt"
    txt_filepath = os.path.join(reports_dir, txt_filename)

    with open(txt_filepath, 'w', encoding='utf-8') as f:
        f.write(f"--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –°–¢–†–ê–¢–ï–ì–ò–ò: {strategy_name} ---\n")
        f.write(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {', '.join(opt_param_names)}\n\n")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        header = f"{opt_param_names[0]:<10} | {opt_param_names[1]:<10} | {'ProfitFactor':<15} | {'TotalTrades':<12}\n"
        f.write(header)
        f.write("-" * len(header) + "\n")
        
        opt_data = []
        for run in results:
            strategy = run[0]  # –ë–µ—Ä–µ–º –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
            params = strategy.p
            analyzer = strategy.analyzers.trade_analyzer.get_analysis()
            
            gross_profit = analyzer.won.pnl.total or 0
            gross_loss = abs(analyzer.lost.pnl.total or 0)
            profit_factor = gross_profit / gross_loss if gross_loss != 0 else float('inf')
            total_trades = analyzer.total.closed or 0
            
            p1_val = getattr(params, opt_param_names[0])
            p2_val = getattr(params, opt_param_names[1])
            
            f.write(f"{p1_val:<10} | {p2_val:<10} | {profit_factor:<15.2f} | {total_trades:<12}\n")
            
            opt_data.append({
                opt_param_names[0]: p1_val,
                opt_param_names[1]: p2_val,
                'profit_factor': profit_factor
            })

    print(f"–û—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {txt_filepath}")

    # --- 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ ---
    if not opt_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã.")
        return
        
    df = pd.DataFrame(opt_data)
    
    # –ï—Å–ª–∏ —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    df['profit_factor'] = df['profit_factor'].replace([float('inf'), -float('inf')], 10)
    
    try:
        heatmap_data = df.pivot(index=opt_param_names[0], columns=opt_param_names[1], values='profit_factor')
        
        plt.figure(figsize=(12, 8))
        sns.heatmap(heatmap_data, annot=True, fmt=".2f", cmap="viridis")
        plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è {strategy_name}\n(–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏)')
        plt.xlabel(opt_param_names[1])
        plt.ylabel(opt_param_names[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ticker_names = [os.path.splitext(ticker)[0] for ticker in strategy.__class__.tickers]
        tickers_str = "_".join(ticker_names)
        png_filename = f"{strategy_name}_opt_heatmap_{tickers_str}_{timestamp}_{period_str}.png"
        png_filepath = os.path.join(reports_dir, png_filename)
        
        plt.savefig(png_filepath)
        plt.close()  # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ–µ –≤ jupyter/etc.
        
        print(f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {png_filepath}")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É: {e}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.")