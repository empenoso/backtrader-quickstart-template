# utils/sortino_analyzer.py

# üìâ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ üìâ
#
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–∏—Å—Ç–µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
# —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ "–ø–ª–æ—Ö–æ–π" —Ä–∏—Å–∫.
# –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫, –æ–Ω —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–∞–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∞ –Ω–µ –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å,
# —á—Ç–æ –¥–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—å.
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –¥–≤–∏–∂–æ–∫ Backtrader –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.
# - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —Å–∏–º—É–ª—è—Ü–∏–∏.
# - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å).
# - –í—ã—á–∏—Å–ª—è–µ—Ç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –∑–∞ –ø—Ä–∏–Ω—è—Ç—ã–π —Ä–∏—Å–∫.
# - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É.
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 10.08.2025
# –í–µ—Ä—Å–∏—è: 1.0
# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/backtrader-quickstart-template/
#
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
#

import math
import backtrader as bt
import numpy as np

class SortinoRatio(bt.Analyzer):
    """
    Analyzer –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –°–æ—Ä—Ç–∏–Ω–æ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—á–µ—Ä–µ–∑ cerebro.addanalyzer):
      - riskfreerate: –≥–æ–¥–æ–≤–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–≤ –¥–æ–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.01 = 1%)
      - periods_per_year: —á–∏—Å–ª–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –≥–æ–¥—É (252 –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –±–∞—Ä–æ–≤)
      - mar: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (annual), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏:
      - sortino, annual_return, downside_deviation, n_periods
    """
    params = dict(
        riskfreerate=0.0,
        periods_per_year=252,
        mar=0.0
    )

    def __init__(self):
        self.equity = []
        self.prev_val = None

    def start(self):
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —á—Ç–æ-—Ç–æ –≤ –±—É–¥—É—â–µ–º
        pass

    def next(self):
        # —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –∫–∞–∂–¥–æ–º –±–∞—Ä–µ
        cur = self.strategy.broker.getvalue()
        if self.prev_val is None:
            self.prev_val = cur
            return
        # —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–æ–¥–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–Ω–µ–≤–Ω–æ–π) –¥–æ—Ö–æ–¥
        r = (cur / self.prev_val) - 1.0
        self.equity.append(r)
        self.prev_val = cur

    def stop(self):
        res = {'sortino': None, 'annual_return': None, 'downside_deviation': None, 'n_periods': len(self.equity)}
        if not self.equity:
            self.rets = res
            return

        returns = np.array(self.equity, dtype=float)
        n = len(returns)
        # –≥–æ–¥–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        total_growth = (1.0 + returns).prod()
        if total_growth <= 0:
            annual_return = -1.0
        else:
            annual_return = total_growth ** (self.p.periods_per_year / n) - 1.0

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≥–æ–¥–æ–≤–æ–π MAR / riskfree –≤ –ø–µ—Ä–∏–æ–¥–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É
        mar_period = (1.0 + self.p.mar) ** (1.0 / self.p.periods_per_year) - 1.0
        rf_annual = float(self.p.riskfreerate)

        # downside deviations: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∏–∂–µ MAR (period)
        downside = np.minimum(0.0, returns - mar_period)
        # —Å—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –±–µ—Ä—ë–º –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º (N) -> –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        mean_sq = np.mean(downside ** 2)
        downside_dev = math.sqrt(mean_sq) * math.sqrt(self.p.periods_per_year)

        numerator = annual_return - rf_annual
        sortino = None
        if downside_dev > 0:
            sortino = numerator / downside_dev
        else:
            # –Ω–µ—Ç –¥–∞—É–Ω—Å–∞–π–¥-–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            sortino = float('inf') if numerator > 0 else None

        res.update({
            'sortino': None if sortino is None else float(sortino),
            'annual_return': float(annual_return),
            'downside_deviation': float(downside_dev),
            'n_periods': n
        })
        self.rets = res

    def get_analysis(self):
        return self.rets
